//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data.iceCTIService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://computer-talk.com", ConfigurationName="iceCTIService.CTIService")]
    public interface CTIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RestartCTI", ReplyAction="https://computer-talk.com/CTIService/RestartCTIResponse")]
        string RestartCTI();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RestartCTI", ReplyAction="https://computer-talk.com/CTIService/RestartCTIResponse")]
        System.Threading.Tasks.Task<string> RestartCTIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWaitExit", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitExitResponse")]
        string AgentEventWaitExit(uint iAgentID, uint iHandle, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWaitExit", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitExitResponse")]
        System.Threading.Tasks.Task<string> AgentEventWaitExitAsync(uint iAgentID, uint iHandle, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWaitSimple", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitSimpleResponse")]
        string AgentEventWaitSimple(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, uint dwHandle);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWaitSimple", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitSimpleResponse")]
        System.Threading.Tasks.Task<string> AgentEventWaitSimpleAsync(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, uint dwHandle);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWait", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitResponse")]
        Data.iceCTIService.AgentEventWaitResponse AgentEventWait(Data.iceCTIService.AgentEventWaitRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AgentEventWait", ReplyAction="https://computer-talk.com/CTIService/AgentEventWaitResponse")]
        System.Threading.Tasks.Task<Data.iceCTIService.AgentEventWaitResponse> AgentEventWaitAsync(Data.iceCTIService.AgentEventWaitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RequestStationInfo", ReplyAction="https://computer-talk.com/CTIService/RequestStationInfoResponse")]
        string RequestStationInfo(uint dwSwitchID, uint iAgentID, string szPassword, uint iAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RequestStationInfo", ReplyAction="https://computer-talk.com/CTIService/RequestStationInfoResponse")]
        System.Threading.Tasks.Task<string> RequestStationInfoAsync(uint dwSwitchID, uint iAgentID, string szPassword, uint iAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/CreateSession", ReplyAction="https://computer-talk.com/CTIService/CreateSessionResponse")]
        string CreateSession(string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/CreateSession", ReplyAction="https://computer-talk.com/CTIService/CreateSessionResponse")]
        System.Threading.Tasks.Task<string> CreateSessionAsync(string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReturnString", ReplyAction="https://computer-talk.com/CTIService/ReturnStringResponse")]
        string ReturnString();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReturnString", ReplyAction="https://computer-talk.com/CTIService/ReturnStringResponse")]
        System.Threading.Tasks.Task<string> ReturnStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetCTIUserData", ReplyAction="https://computer-talk.com/CTIService/SetCTIUserDataResponse")]
        string SetCTIUserData(string iSessionID, string szUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetCTIUserData", ReplyAction="https://computer-talk.com/CTIService/SetCTIUserDataResponse")]
        System.Threading.Tasks.Task<string> SetCTIUserDataAsync(string iSessionID, string szUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCTIUserData", ReplyAction="https://computer-talk.com/CTIService/GetCTIUserDataResponse")]
        string GetCTIUserData(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCTIUserData", ReplyAction="https://computer-talk.com/CTIService/GetCTIUserDataResponse")]
        System.Threading.Tasks.Task<string> GetCTIUserDataAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetReady", ReplyAction="https://computer-talk.com/CTIService/SetReadyResponse")]
        string SetReady(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetReady", ReplyAction="https://computer-talk.com/CTIService/SetReadyResponse")]
        System.Threading.Tasks.Task<string> SetReadyAsync(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetNotReady", ReplyAction="https://computer-talk.com/CTIService/SetNotReadyResponse")]
        string SetNotReady(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string iReason, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetNotReady", ReplyAction="https://computer-talk.com/CTIService/SetNotReadyResponse")]
        System.Threading.Tasks.Task<string> SetNotReadyAsync(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string iReason, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleHold", ReplyAction="https://computer-talk.com/CTIService/ToggleHoldResponse")]
        string ToggleHold(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleHold", ReplyAction="https://computer-talk.com/CTIService/ToggleHoldResponse")]
        System.Threading.Tasks.Task<string> ToggleHoldAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgent", ReplyAction="https://computer-talk.com/CTIService/LogonAgentResponse")]
        string LogonAgent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgent", ReplyAction="https://computer-talk.com/CTIService/LogonAgentResponse")]
        System.Threading.Tasks.Task<string> LogonAgentAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgent", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentResponse")]
        string LogoffAgent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgent", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AnswerCall", ReplyAction="https://computer-talk.com/CTIService/AnswerCallResponse")]
        string AnswerCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/AnswerCall", ReplyAction="https://computer-talk.com/CTIService/AnswerCallResponse")]
        System.Threading.Tasks.Task<string> AnswerCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PlaceCall", ReplyAction="https://computer-talk.com/CTIService/PlaceCallResponse")]
        string PlaceCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PlaceCall", ReplyAction="https://computer-talk.com/CTIService/PlaceCallResponse")]
        System.Threading.Tasks.Task<string> PlaceCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleaseCall", ReplyAction="https://computer-talk.com/CTIService/ReleaseCallResponse")]
        string ReleaseCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleaseCall", ReplyAction="https://computer-talk.com/CTIService/ReleaseCallResponse")]
        System.Threading.Tasks.Task<string> ReleaseCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/Conference", ReplyAction="https://computer-talk.com/CTIService/ConferenceResponse")]
        string Conference(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/Conference", ReplyAction="https://computer-talk.com/CTIService/ConferenceResponse")]
        System.Threading.Tasks.Task<string> ConferenceAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/BlindTransferCTI", ReplyAction="https://computer-talk.com/CTIService/BlindTransferCTIResponse")]
        string BlindTransferCTI(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/BlindTransferCTI", ReplyAction="https://computer-talk.com/CTIService/BlindTransferCTIResponse")]
        System.Threading.Tasks.Task<string> BlindTransferCTIAsync(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/BlindTransfer", ReplyAction="https://computer-talk.com/CTIService/BlindTransferResponse")]
        string BlindTransfer(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/BlindTransfer", ReplyAction="https://computer-talk.com/CTIService/BlindTransferResponse")]
        System.Threading.Tasks.Task<string> BlindTransferAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultTransfer", ReplyAction="https://computer-talk.com/CTIService/ConsultTransferResponse")]
        string ConsultTransfer(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultTransfer", ReplyAction="https://computer-talk.com/CTIService/ConsultTransferResponse")]
        System.Threading.Tasks.Task<string> ConsultTransferAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultTransferCTI", ReplyAction="https://computer-talk.com/CTIService/ConsultTransferCTIResponse")]
        string ConsultTransferCTI(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultTransferCTI", ReplyAction="https://computer-talk.com/CTIService/ConsultTransferCTIResponse")]
        System.Threading.Tasks.Task<string> ConsultTransferCTIAsync(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndConsult", ReplyAction="https://computer-talk.com/CTIService/EndConsultResponse")]
        string EndConsult(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndConsult", ReplyAction="https://computer-talk.com/CTIService/EndConsultResponse")]
        System.Threading.Tasks.Task<string> EndConsultAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndConsultCTI", ReplyAction="https://computer-talk.com/CTIService/EndConsultCTIResponse")]
        string EndConsultCTI(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndConsultCTI", ReplyAction="https://computer-talk.com/CTIService/EndConsultCTIResponse")]
        System.Threading.Tasks.Task<string> EndConsultCTIAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickRingingCall", ReplyAction="https://computer-talk.com/CTIService/PickRingingCallResponse")]
        string PickRingingCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwRingingID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickRingingCall", ReplyAction="https://computer-talk.com/CTIService/PickRingingCallResponse")]
        System.Threading.Tasks.Task<string> PickRingingCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwRingingID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickHeldCall", ReplyAction="https://computer-talk.com/CTIService/PickHeldCallResponse")]
        string PickHeldCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwHeldID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickHeldCall", ReplyAction="https://computer-talk.com/CTIService/PickHeldCallResponse")]
        System.Threading.Tasks.Task<string> PickHeldCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwHeldID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickAcdCall", ReplyAction="https://computer-talk.com/CTIService/PickAcdCallResponse")]
        string PickAcdCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwQueueID, string dwContactID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickAcdCall", ReplyAction="https://computer-talk.com/CTIService/PickAcdCallResponse")]
        System.Threading.Tasks.Task<string> PickAcdCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwQueueID, string dwContactID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SelectLOB", ReplyAction="https://computer-talk.com/CTIService/SelectLOBResponse")]
        string SelectLOB(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iLOBCode, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SelectLOB", ReplyAction="https://computer-talk.com/CTIService/SelectLOBResponse")]
        System.Threading.Tasks.Task<string> SelectLOBAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iLOBCode, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EmergencyKey", ReplyAction="https://computer-talk.com/CTIService/EmergencyKeyResponse")]
        string EmergencyKey(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EmergencyKey", ReplyAction="https://computer-talk.com/CTIService/EmergencyKeyResponse")]
        System.Threading.Tasks.Task<string> EmergencyKeyAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleMonitor", ReplyAction="https://computer-talk.com/CTIService/ToggleMonitorResponse")]
        string ToggleMonitor(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwMonitoredID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleMonitor", ReplyAction="https://computer-talk.com/CTIService/ToggleMonitorResponse")]
        System.Threading.Tasks.Task<string> ToggleMonitorAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwMonitoredID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickPAQCall", ReplyAction="https://computer-talk.com/CTIService/PickPAQCallResponse")]
        string PickPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPickedID, string dwPickedPos, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/PickPAQCall", ReplyAction="https://computer-talk.com/CTIService/PickPAQCallResponse")]
        System.Threading.Tasks.Task<string> PickPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPickedID, string dwPickedPos, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ParkCall", ReplyAction="https://computer-talk.com/CTIService/ParkCallResponse")]
        string ParkCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ParkCall", ReplyAction="https://computer-talk.com/CTIService/ParkCallResponse")]
        System.Threading.Tasks.Task<string> ParkCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetQueueStatsString", ReplyAction="https://computer-talk.com/CTIService/GetQueueStatsStringResponse")]
        string GetQueueStatsString(string dwSwitchID, string dwQueueID, string cdelimiter, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetQueueStatsString", ReplyAction="https://computer-talk.com/CTIService/GetQueueStatsStringResponse")]
        System.Threading.Tasks.Task<string> GetQueueStatsStringAsync(string dwSwitchID, string dwQueueID, string cdelimiter, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/CreateSession1", ReplyAction="https://computer-talk.com/CTIService/CreateSession1Response")]
        string CreateSession1(string source, string pszDNIS, string pszANIName, string pszANINum, string pszUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/CreateSession1", ReplyAction="https://computer-talk.com/CTIService/CreateSession1Response")]
        System.Threading.Tasks.Task<string> CreateSession1Async(string source, string pszDNIS, string pszANIName, string pszANINum, string pszUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndSession", ReplyAction="https://computer-talk.com/CTIService/EndSessionResponse")]
        string EndSession(string iSessionID, string szReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/EndSession", ReplyAction="https://computer-talk.com/CTIService/EndSessionResponse")]
        System.Threading.Tasks.Task<string> EndSessionAsync(string iSessionID, string szReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetANI", ReplyAction="https://computer-talk.com/CTIService/SetANIResponse")]
        string SetANI(string iSessionID, string pszANINumber, string pszANIName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetANI", ReplyAction="https://computer-talk.com/CTIService/SetANIResponse")]
        System.Threading.Tasks.Task<string> SetANIAsync(string iSessionID, string pszANINumber, string pszANIName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetDNIS", ReplyAction="https://computer-talk.com/CTIService/SetDNISResponse")]
        string SetDNIS(string iSessionID, string pszDNIS);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetDNIS", ReplyAction="https://computer-talk.com/CTIService/SetDNISResponse")]
        System.Threading.Tasks.Task<string> SetDNISAsync(string iSessionID, string pszDNIS);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceID", ReplyAction="https://computer-talk.com/CTIService/SetIceIDResponse")]
        string SetIceID(string iSessionID, string iIceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceID", ReplyAction="https://computer-talk.com/CTIService/SetIceIDResponse")]
        System.Threading.Tasks.Task<string> SetIceIDAsync(string iSessionID, string iIceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetSkill", ReplyAction="https://computer-talk.com/CTIService/SetSkillResponse")]
        string SetSkill(string iSessionID, string iSkillID, string iType, string iLevel, string iPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetSkill", ReplyAction="https://computer-talk.com/CTIService/SetSkillResponse")]
        System.Threading.Tasks.Task<string> SetSkillAsync(string iSessionID, string iSkillID, string iType, string iLevel, string iPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceUserData", ReplyAction="https://computer-talk.com/CTIService/GetIceUserDataResponse")]
        string GetIceUserData(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceUserData", ReplyAction="https://computer-talk.com/CTIService/GetIceUserDataResponse")]
        System.Threading.Tasks.Task<string> GetIceUserDataAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetANI", ReplyAction="https://computer-talk.com/CTIService/GetANIResponse")]
        string GetANI(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetANI", ReplyAction="https://computer-talk.com/CTIService/GetANIResponse")]
        System.Threading.Tasks.Task<string> GetANIAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetDNIS", ReplyAction="https://computer-talk.com/CTIService/GetDNISResponse")]
        string GetDNIS(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetDNIS", ReplyAction="https://computer-talk.com/CTIService/GetDNISResponse")]
        System.Threading.Tasks.Task<string> GetDNISAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetRoutingDN", ReplyAction="https://computer-talk.com/CTIService/GetRoutingDNResponse")]
        string GetRoutingDN(string iSessionID, string szDNGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetRoutingDN", ReplyAction="https://computer-talk.com/CTIService/GetRoutingDNResponse")]
        System.Threading.Tasks.Task<string> GetRoutingDNAsync(string iSessionID, string szDNGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSkillCount", ReplyAction="https://computer-talk.com/CTIService/GetSkillCountResponse")]
        string GetSkillCount(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSkillCount", ReplyAction="https://computer-talk.com/CTIService/GetSkillCountResponse")]
        System.Threading.Tasks.Task<string> GetSkillCountAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSkill", ReplyAction="https://computer-talk.com/CTIService/GetSkillResponse")]
        string GetSkill(string iSessionID, string iSkillNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSkill", ReplyAction="https://computer-talk.com/CTIService/GetSkillResponse")]
        System.Threading.Tasks.Task<string> GetSkillAsync(string iSessionID, string iSkillNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceUserData", ReplyAction="https://computer-talk.com/CTIService/SetIceUserDataResponse")]
        string SetIceUserData(string iSessionID, string pszUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceUserData", ReplyAction="https://computer-talk.com/CTIService/SetIceUserDataResponse")]
        System.Threading.Tasks.Task<string> SetIceUserDataAsync(string iSessionID, string pszUserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDDN", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDDNResponse")]
        string GetSessionIDDN(string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDDN", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDDNResponse")]
        System.Threading.Tasks.Task<string> GetSessionIDDNAsync(string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDDN1", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDDN1Response")]
        string GetSessionIDDN1(string szDN, string bEndSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDDN1", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDDN1Response")]
        System.Threading.Tasks.Task<string> GetSessionIDDN1Async(string szDN, string bEndSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetAgentState", ReplyAction="https://computer-talk.com/CTIService/GetAgentStateResponse")]
        string GetAgentState(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetAgentState", ReplyAction="https://computer-talk.com/CTIService/GetAgentStateResponse")]
        System.Threading.Tasks.Task<string> GetAgentStateAsync(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDPort", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDPortResponse")]
        string GetSessionIDPort(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDPort", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDPortResponse")]
        System.Threading.Tasks.Task<string> GetSessionIDPortAsync(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDPort1", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDPort1Response")]
        string GetSessionIDPort1(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDPort1", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDPort1Response")]
        System.Threading.Tasks.Task<string> GetSessionIDPort1Async(string iPort, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RemoveSkill", ReplyAction="https://computer-talk.com/CTIService/RemoveSkillResponse")]
        string RemoveSkill(string iSessionID, string iSkillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RemoveSkill", ReplyAction="https://computer-talk.com/CTIService/RemoveSkillResponse")]
        System.Threading.Tasks.Task<string> RemoveSkillAsync(string iSessionID, string iSkillID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/MaintainSession", ReplyAction="https://computer-talk.com/CTIService/MaintainSessionResponse")]
        string MaintainSession(string iSessionID, string bMaintain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/MaintainSession", ReplyAction="https://computer-talk.com/CTIService/MaintainSessionResponse")]
        System.Threading.Tasks.Task<string> MaintainSessionAsync(string iSessionID, string bMaintain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/VerifyCTI", ReplyAction="https://computer-talk.com/CTIService/VerifyCTIResponse")]
        string VerifyCTI();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/VerifyCTI", ReplyAction="https://computer-talk.com/CTIService/VerifyCTIResponse")]
        System.Threading.Tasks.Task<string> VerifyCTIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetReadyCTI", ReplyAction="https://computer-talk.com/CTIService/SetReadyCTIResponse")]
        string SetReadyCTI(string szIVRName, string iIVRPortNumber, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetReadyCTI", ReplyAction="https://computer-talk.com/CTIService/SetReadyCTIResponse")]
        System.Threading.Tasks.Task<string> SetReadyCTIAsync(string szIVRName, string iIVRPortNumber, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetNotReadyCTI", ReplyAction="https://computer-talk.com/CTIService/SetNotReadyCTIResponse")]
        string SetNotReadyCTI(string szIVRName, string iIVRPortNumber, string iReason, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetNotReadyCTI", ReplyAction="https://computer-talk.com/CTIService/SetNotReadyCTIResponse")]
        System.Threading.Tasks.Task<string> SetNotReadyCTIAsync(string szIVRName, string iIVRPortNumber, string iReason, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleHoldCTI", ReplyAction="https://computer-talk.com/CTIService/ToggleHoldCTIResponse")]
        string ToggleHoldCTI(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleHoldCTI", ReplyAction="https://computer-talk.com/CTIService/ToggleHoldCTIResponse")]
        System.Threading.Tasks.Task<string> ToggleHoldCTIAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDIceID", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDIceIDResponse")]
        string GetSessionIDIceID(string iIceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetSessionIDIceID", ReplyAction="https://computer-talk.com/CTIService/GetSessionIDIceIDResponse")]
        System.Threading.Tasks.Task<string> GetSessionIDIceIDAsync(string iIceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogError", ReplyAction="https://computer-talk.com/CTIService/LogErrorResponse")]
        string LogError(string szError, string szSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogError", ReplyAction="https://computer-talk.com/CTIService/LogErrorResponse")]
        System.Threading.Tasks.Task<string> LogErrorAsync(string szError, string szSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConferenceCTI", ReplyAction="https://computer-talk.com/CTIService/ConferenceCTIResponse")]
        string ConferenceCTI(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConferenceCTI", ReplyAction="https://computer-talk.com/CTIService/ConferenceCTIResponse")]
        System.Threading.Tasks.Task<string> ConferenceCTIAsync(string iSessionID, string szDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleaseCallCTI", ReplyAction="https://computer-talk.com/CTIService/ReleaseCallCTIResponse")]
        string ReleaseCallCTI(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleaseCallCTI", ReplyAction="https://computer-talk.com/CTIService/ReleaseCallCTIResponse")]
        System.Threading.Tasks.Task<string> ReleaseCallCTIAsync(string iSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SelectLOBCTI", ReplyAction="https://computer-talk.com/CTIService/SelectLOBCTIResponse")]
        string SelectLOBCTI(string iSessionID, string iLOBCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SelectLOBCTI", ReplyAction="https://computer-talk.com/CTIService/SelectLOBCTIResponse")]
        System.Threading.Tasks.Task<string> SelectLOBCTIAsync(string iSessionID, string iLOBCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleMonitorCTI", ReplyAction="https://computer-talk.com/CTIService/ToggleMonitorCTIResponse")]
        string ToggleMonitorCTI(string iPortNumber, string szIVRName, string iAgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ToggleMonitorCTI", ReplyAction="https://computer-talk.com/CTIService/ToggleMonitorCTIResponse")]
        System.Threading.Tasks.Task<string> ToggleMonitorCTIAsync(string iPortNumber, string szIVRName, string iAgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetStatus", ReplyAction="https://computer-talk.com/CTIService/GetStatusResponse")]
        string GetStatus(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetStatus", ReplyAction="https://computer-talk.com/CTIService/GetStatusResponse")]
        System.Threading.Tasks.Task<string> GetStatusAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCurQueued", ReplyAction="https://computer-talk.com/CTIService/GetCurQueuedResponse")]
        string GetCurQueued(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCurQueued", ReplyAction="https://computer-talk.com/CTIService/GetCurQueuedResponse")]
        System.Threading.Tasks.Task<string> GetCurQueuedAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCurLongestQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetCurLongestQueuedTimeResponse")]
        string GetCurLongestQueuedTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCurLongestQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetCurLongestQueuedTimeResponse")]
        System.Threading.Tasks.Task<string> GetCurLongestQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsLoggedOn", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsLoggedOnResponse")]
        string GetNumAgentsLoggedOn(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsLoggedOn", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsLoggedOnResponse")]
        System.Threading.Tasks.Task<string> GetNumAgentsLoggedOnAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsOnContact", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsOnContactResponse")]
        string GetNumAgentsOnContact(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsOnContact", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsOnContactResponse")]
        System.Threading.Tasks.Task<string> GetNumAgentsOnContactAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsReady", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsReadyResponse")]
        string GetNumAgentsReady(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAgentsReady", ReplyAction="https://computer-talk.com/CTIService/GetNumAgentsReadyResponse")]
        System.Threading.Tasks.Task<string> GetNumAgentsReadyAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumOffered", ReplyAction="https://computer-talk.com/CTIService/GetNumOfferedResponse")]
        string GetNumOffered(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumOffered", ReplyAction="https://computer-talk.com/CTIService/GetNumOfferedResponse")]
        System.Threading.Tasks.Task<string> GetNumOfferedAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledInThisQueue", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledInThisQueueResponse")]
        string GetNumHandledInThisQueue(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledInThisQueue", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledInThisQueueResponse")]
        System.Threading.Tasks.Task<string> GetNumHandledInThisQueueAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledInOtherQueue", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledInOtherQueueResponse")]
        string GetNumHandledInOtherQueue(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledInOtherQueue", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledInOtherQueueResponse")]
        System.Threading.Tasks.Task<string> GetNumHandledInOtherQueueAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAbandoned", ReplyAction="https://computer-talk.com/CTIService/GetNumAbandonedResponse")]
        string GetNumAbandoned(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumAbandoned", ReplyAction="https://computer-talk.com/CTIService/GetNumAbandonedResponse")]
        System.Threading.Tasks.Task<string> GetNumAbandonedAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetOfferedQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetOfferedQueuedTimeResponse")]
        string GetOfferedQueuedTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetOfferedQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetOfferedQueuedTimeResponse")]
        System.Threading.Tasks.Task<string> GetOfferedQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetHandledQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetHandledQueuedTimeResponse")]
        string GetHandledQueuedTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetHandledQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetHandledQueuedTimeResponse")]
        System.Threading.Tasks.Task<string> GetHandledQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetHandledOtherQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetHandledOtherQueuedTimeResponse")]
        string GetHandledOtherQueuedTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetHandledOtherQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetHandledOtherQueuedTimeResponse")]
        System.Threading.Tasks.Task<string> GetHandledOtherQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetAbandonedQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetAbandonedQueuedTimeResponse")]
        string GetAbandonedQueuedTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetAbandonedQueuedTime", ReplyAction="https://computer-talk.com/CTIService/GetAbandonedQueuedTimeResponse")]
        System.Threading.Tasks.Task<string> GetAbandonedQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetTargetASA", ReplyAction="https://computer-talk.com/CTIService/GetTargetASAResponse")]
        string GetTargetASA(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetTargetASA", ReplyAction="https://computer-talk.com/CTIService/GetTargetASAResponse")]
        System.Threading.Tasks.Task<string> GetTargetASAAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledLessThanTargetASA", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledLessThanTargetASAResponse")]
        string GetNumHandledLessThanTargetASA(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumHandledLessThanTargetASA", ReplyAction="https://computer-talk.com/CTIService/GetNumHandledLessThanTargetASAResponse")]
        System.Threading.Tasks.Task<string> GetNumHandledLessThanTargetASAAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetEstimatedWaitTime", ReplyAction="https://computer-talk.com/CTIService/GetEstimatedWaitTimeResponse")]
        string GetEstimatedWaitTime(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetEstimatedWaitTime", ReplyAction="https://computer-talk.com/CTIService/GetEstimatedWaitTimeResponse")]
        System.Threading.Tasks.Task<string> GetEstimatedWaitTimeAsync(string dwSwitchID, string dwQueueID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogonAgentCTIQueueResponse")]
        string LogonAgentCTIQueue(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogonAgentCTIQueueResponse")]
        System.Threading.Tasks.Task<string> LogonAgentCTIQueueAsync(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentCTI", ReplyAction="https://computer-talk.com/CTIService/LogonAgentCTIResponse")]
        string LogonAgentCTI(string iIVRPortNumber, string szPassword, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentCTI", ReplyAction="https://computer-talk.com/CTIService/LogonAgentCTIResponse")]
        System.Threading.Tasks.Task<string> LogonAgentCTIAsync(string iIVRPortNumber, string szPassword, string szIVRName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgents", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsResponse")]
        string LogonAgents(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgents", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsResponse")]
        System.Threading.Tasks.Task<string> LogonAgentsAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentsCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsCTIQueueResponse")]
        string LogonAgentsCTIQueue(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentsCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsCTIQueueResponse")]
        System.Threading.Tasks.Task<string> LogonAgentsCTIQueueAsync(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentsCTI", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsCTIResponse")]
        string LogonAgentsCTI(string iIVRPortNumber, string szPassword, string szIVRName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogonAgentsCTI", ReplyAction="https://computer-talk.com/CTIService/LogonAgentsCTIResponse")]
        System.Threading.Tasks.Task<string> LogonAgentsCTIAsync(string iIVRPortNumber, string szPassword, string szIVRName, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentCTIQueueResponse")]
        string LogoffAgentCTIQueue(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentCTIQueueResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentCTIQueueAsync(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentCTI", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentCTIResponse")]
        string LogoffAgentCTI(string iIVRPortNumber, string szIVRName, string bDisconnect, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentCTI", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentCTIResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentCTIAsync(string iIVRPortNumber, string szIVRName, string bDisconnect, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgents", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsResponse")]
        string LogoffAgents(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgents", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentsAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect, string iNumAgents);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentsCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsCTIQueueResponse")]
        string LogoffAgentsCTIQueue(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string iNumAgents, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentsCTIQueue", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsCTIQueueResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentsCTIQueueAsync(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string iNumAgents, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentsCTI", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsCTIResponse")]
        string LogoffAgentsCTI(string iIVRPortNumber, string szIVRName, string bDisconnect, string iNumAgents, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/LogoffAgentsCTI", ReplyAction="https://computer-talk.com/CTIService/LogoffAgentsCTIResponse")]
        System.Threading.Tasks.Task<string> LogoffAgentsCTIAsync(string iIVRPortNumber, string szIVRName, string bDisconnect, string iNumAgents, string szPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SwapPAQCall", ReplyAction="https://computer-talk.com/CTIService/SwapPAQCallResponse")]
        string SwapPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SwapPAQCall", ReplyAction="https://computer-talk.com/CTIService/SwapPAQCallResponse")]
        System.Threading.Tasks.Task<string> SwapPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultPAQCall", ReplyAction="https://computer-talk.com/CTIService/ConsultPAQCallResponse")]
        string ConsultPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ConsultPAQCall", ReplyAction="https://computer-talk.com/CTIService/ConsultPAQCallResponse")]
        System.Threading.Tasks.Task<string> ConsultPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RedirectPAQCall", ReplyAction="https://computer-talk.com/CTIService/RedirectPAQCallResponse")]
        string RedirectPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RedirectPAQCall", ReplyAction="https://computer-talk.com/CTIService/RedirectPAQCallResponse")]
        System.Threading.Tasks.Task<string> RedirectPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleasePAQCall", ReplyAction="https://computer-talk.com/CTIService/ReleasePAQCallResponse")]
        string ReleasePAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/ReleasePAQCall", ReplyAction="https://computer-talk.com/CTIService/ReleasePAQCallResponse")]
        System.Threading.Tasks.Task<string> ReleasePAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceServerName", ReplyAction="https://computer-talk.com/CTIService/SetIceServerNameResponse")]
        string SetIceServerName(string iSessionID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceServerName", ReplyAction="https://computer-talk.com/CTIService/SetIceServerNameResponse")]
        System.Threading.Tasks.Task<string> SetIceServerNameAsync(string iSessionID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIVRName", ReplyAction="https://computer-talk.com/CTIService/SetIVRNameResponse")]
        string SetIVRName(string iSessionID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIVRName", ReplyAction="https://computer-talk.com/CTIService/SetIVRNameResponse")]
        System.Threading.Tasks.Task<string> SetIVRNameAsync(string iSessionID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumPermittedAddresses", ReplyAction="https://computer-talk.com/CTIService/GetNumPermittedAddressesResponse")]
        string GetNumPermittedAddresses();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetNumPermittedAddresses", ReplyAction="https://computer-talk.com/CTIService/GetNumPermittedAddressesResponse")]
        System.Threading.Tasks.Task<string> GetNumPermittedAddressesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetPermittedAddress", ReplyAction="https://computer-talk.com/CTIService/GetPermittedAddressResponse")]
        string GetPermittedAddress(string iIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetPermittedAddress", ReplyAction="https://computer-talk.com/CTIService/GetPermittedAddressResponse")]
        System.Threading.Tasks.Task<string> GetPermittedAddressAsync(string iIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentState", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentStateResponse")]
        string GetIceAgentState(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentState", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentStateResponse")]
        System.Threading.Tasks.Task<string> GetIceAgentStateAsync(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentPendingState", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentPendingStateResponse")]
        string GetIceAgentPendingState(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentPendingState", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentPendingStateResponse")]
        System.Threading.Tasks.Task<string> GetIceAgentPendingStateAsync(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RecordCall", ReplyAction="https://computer-talk.com/CTIService/RecordCallResponse")]
        string RecordCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RecordCall", ReplyAction="https://computer-talk.com/CTIService/RecordCallResponse")]
        System.Threading.Tasks.Task<string> RecordCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCallForwardData", ReplyAction="https://computer-talk.com/CTIService/GetCallForwardDataResponse")]
        string GetCallForwardData(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCallForwardData", ReplyAction="https://computer-talk.com/CTIService/GetCallForwardDataResponse")]
        System.Threading.Tasks.Task<string> GetCallForwardDataAsync(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetCallForwardData", ReplyAction="https://computer-talk.com/CTIService/SetCallForwardDataResponse")]
        string SetCallForwardData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string flags, string szDN, string szServerName, string dwDuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetCallForwardData", ReplyAction="https://computer-talk.com/CTIService/SetCallForwardDataResponse")]
        System.Threading.Tasks.Task<string> SetCallForwardDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string flags, string szDN, string szServerName, string dwDuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RedirectAlertingCall", ReplyAction="https://computer-talk.com/CTIService/RedirectAlertingCallResponse")]
        string RedirectAlertingCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/RedirectAlertingCall", ReplyAction="https://computer-talk.com/CTIService/RedirectAlertingCallResponse")]
        System.Threading.Tasks.Task<string> RedirectAlertingCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/TelephoneEvent", ReplyAction="https://computer-talk.com/CTIService/TelephoneEventResponse")]
        string TelephoneEvent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szData, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/TelephoneEvent", ReplyAction="https://computer-talk.com/CTIService/TelephoneEventResponse")]
        System.Threading.Tasks.Task<string> TelephoneEventAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szData, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetPAQStatusString", ReplyAction="https://computer-talk.com/CTIService/GetPAQStatusStringResponse")]
        string GetPAQStatusString(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetPAQStatusString", ReplyAction="https://computer-talk.com/CTIService/GetPAQStatusStringResponse")]
        System.Threading.Tasks.Task<string> GetPAQStatusStringAsync(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCallInfoString", ReplyAction="https://computer-talk.com/CTIService/GetCallInfoStringResponse")]
        string GetCallInfoString(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetCallInfoString", ReplyAction="https://computer-talk.com/CTIService/GetCallInfoStringResponse")]
        System.Threading.Tasks.Task<string> GetCallInfoStringAsync(string dwSwitchID, string dwAgentID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentUserData", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentUserDataResponse")]
        string GetIceAgentUserData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/GetIceAgentUserData", ReplyAction="https://computer-talk.com/CTIService/GetIceAgentUserDataResponse")]
        System.Threading.Tasks.Task<string> GetIceAgentUserDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceAgentUserData", ReplyAction="https://computer-talk.com/CTIService/SetIceAgentUserDataResponse")]
        string SetIceAgentUserData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string userData, string szServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://computer-talk.com/SetIceAgentUserData", ReplyAction="https://computer-talk.com/CTIService/SetIceAgentUserDataResponse")]
        System.Threading.Tasks.Task<string> SetIceAgentUserDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string userData, string szServerName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AgentEventWait", WrapperNamespace="https://computer-talk.com", IsWrapped=true)]
    public partial class AgentEventWaitRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=0)]
        public uint iAgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=1)]
        public uint iAddressID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=2)]
        public int iTimeout;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=3)]
        public string szServerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=4)]
        public bool bEnd;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=5)]
        public uint dwHandle;
        
        public AgentEventWaitRequest() {
        }
        
        public AgentEventWaitRequest(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, uint dwHandle) {
            this.iAgentID = iAgentID;
            this.iAddressID = iAddressID;
            this.iTimeout = iTimeout;
            this.szServerName = szServerName;
            this.bEnd = bEnd;
            this.dwHandle = dwHandle;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AgentEventWaitResponse", WrapperNamespace="https://computer-talk.com", IsWrapped=true)]
    public partial class AgentEventWaitResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=0)]
        public string AgentEventWaitResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="https://computer-talk.com", Order=1)]
        public uint dwHandle;
        
        public AgentEventWaitResponse() {
        }
        
        public AgentEventWaitResponse(string AgentEventWaitResult, uint dwHandle) {
            this.AgentEventWaitResult = AgentEventWaitResult;
            this.dwHandle = dwHandle;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CTIServiceChannel : Data.iceCTIService.CTIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CTIServiceClient : System.ServiceModel.ClientBase<Data.iceCTIService.CTIService>, Data.iceCTIService.CTIService {
        
        public CTIServiceClient() {
        }
        
        public CTIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CTIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CTIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CTIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RestartCTI() {
            return base.Channel.RestartCTI();
        }
        
        public System.Threading.Tasks.Task<string> RestartCTIAsync() {
            return base.Channel.RestartCTIAsync();
        }
        
        public string AgentEventWaitExit(uint iAgentID, uint iHandle, string szServerName) {
            return base.Channel.AgentEventWaitExit(iAgentID, iHandle, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> AgentEventWaitExitAsync(uint iAgentID, uint iHandle, string szServerName) {
            return base.Channel.AgentEventWaitExitAsync(iAgentID, iHandle, szServerName);
        }
        
        public string AgentEventWaitSimple(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, uint dwHandle) {
            return base.Channel.AgentEventWaitSimple(iAgentID, iAddressID, iTimeout, szServerName, bEnd, dwHandle);
        }
        
        public System.Threading.Tasks.Task<string> AgentEventWaitSimpleAsync(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, uint dwHandle) {
            return base.Channel.AgentEventWaitSimpleAsync(iAgentID, iAddressID, iTimeout, szServerName, bEnd, dwHandle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Data.iceCTIService.AgentEventWaitResponse Data.iceCTIService.CTIService.AgentEventWait(Data.iceCTIService.AgentEventWaitRequest request) {
            return base.Channel.AgentEventWait(request);
        }
        
        public string AgentEventWait(uint iAgentID, uint iAddressID, int iTimeout, string szServerName, bool bEnd, ref uint dwHandle) {
            Data.iceCTIService.AgentEventWaitRequest inValue = new Data.iceCTIService.AgentEventWaitRequest();
            inValue.iAgentID = iAgentID;
            inValue.iAddressID = iAddressID;
            inValue.iTimeout = iTimeout;
            inValue.szServerName = szServerName;
            inValue.bEnd = bEnd;
            inValue.dwHandle = dwHandle;
            Data.iceCTIService.AgentEventWaitResponse retVal = ((Data.iceCTIService.CTIService)(this)).AgentEventWait(inValue);
            dwHandle = retVal.dwHandle;
            return retVal.AgentEventWaitResult;
        }
        
        public System.Threading.Tasks.Task<Data.iceCTIService.AgentEventWaitResponse> AgentEventWaitAsync(Data.iceCTIService.AgentEventWaitRequest request) {
            return base.Channel.AgentEventWaitAsync(request);
        }
        
        public string RequestStationInfo(uint dwSwitchID, uint iAgentID, string szPassword, uint iAddressID, string szServerName) {
            return base.Channel.RequestStationInfo(dwSwitchID, iAgentID, szPassword, iAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> RequestStationInfoAsync(uint dwSwitchID, uint iAgentID, string szPassword, uint iAddressID, string szServerName) {
            return base.Channel.RequestStationInfoAsync(dwSwitchID, iAgentID, szPassword, iAddressID, szServerName);
        }
        
        public string CreateSession(string source) {
            return base.Channel.CreateSession(source);
        }
        
        public System.Threading.Tasks.Task<string> CreateSessionAsync(string source) {
            return base.Channel.CreateSessionAsync(source);
        }
        
        public string ReturnString() {
            return base.Channel.ReturnString();
        }
        
        public System.Threading.Tasks.Task<string> ReturnStringAsync() {
            return base.Channel.ReturnStringAsync();
        }
        
        public string SetCTIUserData(string iSessionID, string szUserData) {
            return base.Channel.SetCTIUserData(iSessionID, szUserData);
        }
        
        public System.Threading.Tasks.Task<string> SetCTIUserDataAsync(string iSessionID, string szUserData) {
            return base.Channel.SetCTIUserDataAsync(iSessionID, szUserData);
        }
        
        public string GetCTIUserData(string iSessionID) {
            return base.Channel.GetCTIUserData(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> GetCTIUserDataAsync(string iSessionID) {
            return base.Channel.GetCTIUserDataAsync(iSessionID);
        }
        
        public string SetReady(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string szServerName) {
            return base.Channel.SetReady(dwSwitchID, iAgentID, szPassword, iAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SetReadyAsync(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string szServerName) {
            return base.Channel.SetReadyAsync(dwSwitchID, iAgentID, szPassword, iAddressID, szServerName);
        }
        
        public string SetNotReady(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string iReason, string szServerName) {
            return base.Channel.SetNotReady(dwSwitchID, iAgentID, szPassword, iAddressID, iReason, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SetNotReadyAsync(string dwSwitchID, string iAgentID, string szPassword, string iAddressID, string iReason, string szServerName) {
            return base.Channel.SetNotReadyAsync(dwSwitchID, iAgentID, szPassword, iAddressID, iReason, szServerName);
        }
        
        public string ToggleHold(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.ToggleHold(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ToggleHoldAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.ToggleHoldAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string LogonAgent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName) {
            return base.Channel.LogonAgent(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName) {
            return base.Channel.LogonAgentAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName);
        }
        
        public string LogoffAgent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect) {
            return base.Channel.LogoffAgent(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, bDisconnect);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect) {
            return base.Channel.LogoffAgentAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, bDisconnect);
        }
        
        public string AnswerCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.AnswerCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> AnswerCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.AnswerCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string PlaceCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.PlaceCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> PlaceCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.PlaceCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public string ReleaseCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.ReleaseCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ReleaseCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.ReleaseCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string Conference(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.Conference(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ConferenceAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.ConferenceAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public string BlindTransferCTI(string iSessionID, string szDN) {
            return base.Channel.BlindTransferCTI(iSessionID, szDN);
        }
        
        public System.Threading.Tasks.Task<string> BlindTransferCTIAsync(string iSessionID, string szDN) {
            return base.Channel.BlindTransferCTIAsync(iSessionID, szDN);
        }
        
        public string BlindTransfer(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.BlindTransfer(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> BlindTransferAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.BlindTransferAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public string ConsultTransfer(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.ConsultTransfer(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ConsultTransferAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.ConsultTransferAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public string ConsultTransferCTI(string iSessionID, string szDN) {
            return base.Channel.ConsultTransferCTI(iSessionID, szDN);
        }
        
        public System.Threading.Tasks.Task<string> ConsultTransferCTIAsync(string iSessionID, string szDN) {
            return base.Channel.ConsultTransferCTIAsync(iSessionID, szDN);
        }
        
        public string EndConsult(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.EndConsult(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> EndConsultAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.EndConsultAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string EndConsultCTI(string iSessionID) {
            return base.Channel.EndConsultCTI(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> EndConsultCTIAsync(string iSessionID) {
            return base.Channel.EndConsultCTIAsync(iSessionID);
        }
        
        public string PickRingingCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwRingingID, string szServerName) {
            return base.Channel.PickRingingCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwRingingID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> PickRingingCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwRingingID, string szServerName) {
            return base.Channel.PickRingingCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwRingingID, szServerName);
        }
        
        public string PickHeldCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwHeldID, string szServerName) {
            return base.Channel.PickHeldCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwHeldID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> PickHeldCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwHeldID, string szServerName) {
            return base.Channel.PickHeldCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwHeldID, szServerName);
        }
        
        public string PickAcdCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwQueueID, string dwContactID, string szServerName) {
            return base.Channel.PickAcdCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwQueueID, dwContactID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> PickAcdCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwQueueID, string dwContactID, string szServerName) {
            return base.Channel.PickAcdCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwQueueID, dwContactID, szServerName);
        }
        
        public string SelectLOB(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iLOBCode, string szServerName) {
            return base.Channel.SelectLOB(dwSwitchID, dwAgentID, szPassword, dwAddressID, iLOBCode, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SelectLOBAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iLOBCode, string szServerName) {
            return base.Channel.SelectLOBAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, iLOBCode, szServerName);
        }
        
        public string EmergencyKey(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.EmergencyKey(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> EmergencyKeyAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.EmergencyKeyAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string ToggleMonitor(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwMonitoredID, string szServerName) {
            return base.Channel.ToggleMonitor(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwMonitoredID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ToggleMonitorAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwMonitoredID, string szServerName) {
            return base.Channel.ToggleMonitorAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwMonitoredID, szServerName);
        }
        
        public string PickPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPickedID, string dwPickedPos, string szServerName) {
            return base.Channel.PickPAQCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPickedID, dwPickedPos, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> PickPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPickedID, string dwPickedPos, string szServerName) {
            return base.Channel.PickPAQCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPickedID, dwPickedPos, szServerName);
        }
        
        public string ParkCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ParkCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ParkCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ParkCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public string GetQueueStatsString(string dwSwitchID, string dwQueueID, string cdelimiter, string szServerName) {
            return base.Channel.GetQueueStatsString(dwSwitchID, dwQueueID, cdelimiter, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetQueueStatsStringAsync(string dwSwitchID, string dwQueueID, string cdelimiter, string szServerName) {
            return base.Channel.GetQueueStatsStringAsync(dwSwitchID, dwQueueID, cdelimiter, szServerName);
        }
        
        public string CreateSession1(string source, string pszDNIS, string pszANIName, string pszANINum, string pszUserData) {
            return base.Channel.CreateSession1(source, pszDNIS, pszANIName, pszANINum, pszUserData);
        }
        
        public System.Threading.Tasks.Task<string> CreateSession1Async(string source, string pszDNIS, string pszANIName, string pszANINum, string pszUserData) {
            return base.Channel.CreateSession1Async(source, pszDNIS, pszANIName, pszANINum, pszUserData);
        }
        
        public string EndSession(string iSessionID, string szReason) {
            return base.Channel.EndSession(iSessionID, szReason);
        }
        
        public System.Threading.Tasks.Task<string> EndSessionAsync(string iSessionID, string szReason) {
            return base.Channel.EndSessionAsync(iSessionID, szReason);
        }
        
        public string SetANI(string iSessionID, string pszANINumber, string pszANIName) {
            return base.Channel.SetANI(iSessionID, pszANINumber, pszANIName);
        }
        
        public System.Threading.Tasks.Task<string> SetANIAsync(string iSessionID, string pszANINumber, string pszANIName) {
            return base.Channel.SetANIAsync(iSessionID, pszANINumber, pszANIName);
        }
        
        public string SetDNIS(string iSessionID, string pszDNIS) {
            return base.Channel.SetDNIS(iSessionID, pszDNIS);
        }
        
        public System.Threading.Tasks.Task<string> SetDNISAsync(string iSessionID, string pszDNIS) {
            return base.Channel.SetDNISAsync(iSessionID, pszDNIS);
        }
        
        public string SetIceID(string iSessionID, string iIceID) {
            return base.Channel.SetIceID(iSessionID, iIceID);
        }
        
        public System.Threading.Tasks.Task<string> SetIceIDAsync(string iSessionID, string iIceID) {
            return base.Channel.SetIceIDAsync(iSessionID, iIceID);
        }
        
        public string SetSkill(string iSessionID, string iSkillID, string iType, string iLevel, string iPriority) {
            return base.Channel.SetSkill(iSessionID, iSkillID, iType, iLevel, iPriority);
        }
        
        public System.Threading.Tasks.Task<string> SetSkillAsync(string iSessionID, string iSkillID, string iType, string iLevel, string iPriority) {
            return base.Channel.SetSkillAsync(iSessionID, iSkillID, iType, iLevel, iPriority);
        }
        
        public string GetIceUserData(string iSessionID) {
            return base.Channel.GetIceUserData(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> GetIceUserDataAsync(string iSessionID) {
            return base.Channel.GetIceUserDataAsync(iSessionID);
        }
        
        public string GetANI(string iSessionID) {
            return base.Channel.GetANI(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> GetANIAsync(string iSessionID) {
            return base.Channel.GetANIAsync(iSessionID);
        }
        
        public string GetDNIS(string iSessionID) {
            return base.Channel.GetDNIS(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> GetDNISAsync(string iSessionID) {
            return base.Channel.GetDNISAsync(iSessionID);
        }
        
        public string GetRoutingDN(string iSessionID, string szDNGroup) {
            return base.Channel.GetRoutingDN(iSessionID, szDNGroup);
        }
        
        public System.Threading.Tasks.Task<string> GetRoutingDNAsync(string iSessionID, string szDNGroup) {
            return base.Channel.GetRoutingDNAsync(iSessionID, szDNGroup);
        }
        
        public string GetSkillCount(string iSessionID) {
            return base.Channel.GetSkillCount(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> GetSkillCountAsync(string iSessionID) {
            return base.Channel.GetSkillCountAsync(iSessionID);
        }
        
        public string GetSkill(string iSessionID, string iSkillNum) {
            return base.Channel.GetSkill(iSessionID, iSkillNum);
        }
        
        public System.Threading.Tasks.Task<string> GetSkillAsync(string iSessionID, string iSkillNum) {
            return base.Channel.GetSkillAsync(iSessionID, iSkillNum);
        }
        
        public string SetIceUserData(string iSessionID, string pszUserData) {
            return base.Channel.SetIceUserData(iSessionID, pszUserData);
        }
        
        public System.Threading.Tasks.Task<string> SetIceUserDataAsync(string iSessionID, string pszUserData) {
            return base.Channel.SetIceUserDataAsync(iSessionID, pszUserData);
        }
        
        public string GetSessionIDDN(string szDN) {
            return base.Channel.GetSessionIDDN(szDN);
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIDDNAsync(string szDN) {
            return base.Channel.GetSessionIDDNAsync(szDN);
        }
        
        public string GetSessionIDDN1(string szDN, string bEndSession) {
            return base.Channel.GetSessionIDDN1(szDN, bEndSession);
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIDDN1Async(string szDN, string bEndSession) {
            return base.Channel.GetSessionIDDN1Async(szDN, bEndSession);
        }
        
        public string GetAgentState(string iPort, string szIVRName) {
            return base.Channel.GetAgentState(iPort, szIVRName);
        }
        
        public System.Threading.Tasks.Task<string> GetAgentStateAsync(string iPort, string szIVRName) {
            return base.Channel.GetAgentStateAsync(iPort, szIVRName);
        }
        
        public string GetSessionIDPort(string iPort, string szIVRName) {
            return base.Channel.GetSessionIDPort(iPort, szIVRName);
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIDPortAsync(string iPort, string szIVRName) {
            return base.Channel.GetSessionIDPortAsync(iPort, szIVRName);
        }
        
        public string GetSessionIDPort1(string iPort, string szIVRName) {
            return base.Channel.GetSessionIDPort1(iPort, szIVRName);
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIDPort1Async(string iPort, string szIVRName) {
            return base.Channel.GetSessionIDPort1Async(iPort, szIVRName);
        }
        
        public string RemoveSkill(string iSessionID, string iSkillID) {
            return base.Channel.RemoveSkill(iSessionID, iSkillID);
        }
        
        public System.Threading.Tasks.Task<string> RemoveSkillAsync(string iSessionID, string iSkillID) {
            return base.Channel.RemoveSkillAsync(iSessionID, iSkillID);
        }
        
        public string MaintainSession(string iSessionID, string bMaintain) {
            return base.Channel.MaintainSession(iSessionID, bMaintain);
        }
        
        public System.Threading.Tasks.Task<string> MaintainSessionAsync(string iSessionID, string bMaintain) {
            return base.Channel.MaintainSessionAsync(iSessionID, bMaintain);
        }
        
        public string VerifyCTI() {
            return base.Channel.VerifyCTI();
        }
        
        public System.Threading.Tasks.Task<string> VerifyCTIAsync() {
            return base.Channel.VerifyCTIAsync();
        }
        
        public string SetReadyCTI(string szIVRName, string iIVRPortNumber, string szPassword) {
            return base.Channel.SetReadyCTI(szIVRName, iIVRPortNumber, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> SetReadyCTIAsync(string szIVRName, string iIVRPortNumber, string szPassword) {
            return base.Channel.SetReadyCTIAsync(szIVRName, iIVRPortNumber, szPassword);
        }
        
        public string SetNotReadyCTI(string szIVRName, string iIVRPortNumber, string iReason, string szPassword) {
            return base.Channel.SetNotReadyCTI(szIVRName, iIVRPortNumber, iReason, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> SetNotReadyCTIAsync(string szIVRName, string iIVRPortNumber, string iReason, string szPassword) {
            return base.Channel.SetNotReadyCTIAsync(szIVRName, iIVRPortNumber, iReason, szPassword);
        }
        
        public string ToggleHoldCTI(string iSessionID) {
            return base.Channel.ToggleHoldCTI(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> ToggleHoldCTIAsync(string iSessionID) {
            return base.Channel.ToggleHoldCTIAsync(iSessionID);
        }
        
        public string GetSessionIDIceID(string iIceID) {
            return base.Channel.GetSessionIDIceID(iIceID);
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIDIceIDAsync(string iIceID) {
            return base.Channel.GetSessionIDIceIDAsync(iIceID);
        }
        
        public string LogError(string szError, string szSource) {
            return base.Channel.LogError(szError, szSource);
        }
        
        public System.Threading.Tasks.Task<string> LogErrorAsync(string szError, string szSource) {
            return base.Channel.LogErrorAsync(szError, szSource);
        }
        
        public string ConferenceCTI(string iSessionID, string szDN) {
            return base.Channel.ConferenceCTI(iSessionID, szDN);
        }
        
        public System.Threading.Tasks.Task<string> ConferenceCTIAsync(string iSessionID, string szDN) {
            return base.Channel.ConferenceCTIAsync(iSessionID, szDN);
        }
        
        public string ReleaseCallCTI(string iSessionID) {
            return base.Channel.ReleaseCallCTI(iSessionID);
        }
        
        public System.Threading.Tasks.Task<string> ReleaseCallCTIAsync(string iSessionID) {
            return base.Channel.ReleaseCallCTIAsync(iSessionID);
        }
        
        public string SelectLOBCTI(string iSessionID, string iLOBCode) {
            return base.Channel.SelectLOBCTI(iSessionID, iLOBCode);
        }
        
        public System.Threading.Tasks.Task<string> SelectLOBCTIAsync(string iSessionID, string iLOBCode) {
            return base.Channel.SelectLOBCTIAsync(iSessionID, iLOBCode);
        }
        
        public string ToggleMonitorCTI(string iPortNumber, string szIVRName, string iAgentID) {
            return base.Channel.ToggleMonitorCTI(iPortNumber, szIVRName, iAgentID);
        }
        
        public System.Threading.Tasks.Task<string> ToggleMonitorCTIAsync(string iPortNumber, string szIVRName, string iAgentID) {
            return base.Channel.ToggleMonitorCTIAsync(iPortNumber, szIVRName, iAgentID);
        }
        
        public string GetStatus(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetStatus(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetStatusAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetCurQueued(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetCurQueued(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetCurQueuedAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetCurQueuedAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetCurLongestQueuedTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetCurLongestQueuedTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetCurLongestQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetCurLongestQueuedTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumAgentsLoggedOn(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsLoggedOn(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumAgentsLoggedOnAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsLoggedOnAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumAgentsOnContact(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsOnContact(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumAgentsOnContactAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsOnContactAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumAgentsReady(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsReady(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumAgentsReadyAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAgentsReadyAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumOffered(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumOffered(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumOfferedAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumOfferedAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumHandledInThisQueue(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledInThisQueue(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumHandledInThisQueueAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledInThisQueueAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumHandledInOtherQueue(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledInOtherQueue(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumHandledInOtherQueueAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledInOtherQueueAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumAbandoned(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAbandoned(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumAbandonedAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumAbandonedAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetOfferedQueuedTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetOfferedQueuedTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetOfferedQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetOfferedQueuedTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetHandledQueuedTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetHandledQueuedTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetHandledQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetHandledQueuedTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetHandledOtherQueuedTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetHandledOtherQueuedTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetHandledOtherQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetHandledOtherQueuedTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetAbandonedQueuedTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetAbandonedQueuedTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetAbandonedQueuedTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetAbandonedQueuedTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetTargetASA(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetTargetASA(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetTargetASAAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetTargetASAAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetNumHandledLessThanTargetASA(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledLessThanTargetASA(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetNumHandledLessThanTargetASAAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetNumHandledLessThanTargetASAAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string GetEstimatedWaitTime(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetEstimatedWaitTime(dwSwitchID, dwQueueID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetEstimatedWaitTimeAsync(string dwSwitchID, string dwQueueID, string szServerName) {
            return base.Channel.GetEstimatedWaitTimeAsync(dwSwitchID, dwQueueID, szServerName);
        }
        
        public string LogonAgentCTIQueue(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName) {
            return base.Channel.LogonAgentCTIQueue(iIVRPortNumber, szPassword, iQueue, szIVRName);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentCTIQueueAsync(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName) {
            return base.Channel.LogonAgentCTIQueueAsync(iIVRPortNumber, szPassword, iQueue, szIVRName);
        }
        
        public string LogonAgentCTI(string iIVRPortNumber, string szPassword, string szIVRName) {
            return base.Channel.LogonAgentCTI(iIVRPortNumber, szPassword, szIVRName);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentCTIAsync(string iIVRPortNumber, string szPassword, string szIVRName) {
            return base.Channel.LogonAgentCTIAsync(iIVRPortNumber, szPassword, szIVRName);
        }
        
        public string LogonAgents(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string iNumAgents) {
            return base.Channel.LogonAgents(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, iNumAgents);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentsAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string iNumAgents) {
            return base.Channel.LogonAgentsAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, iNumAgents);
        }
        
        public string LogonAgentsCTIQueue(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName, string iNumAgents) {
            return base.Channel.LogonAgentsCTIQueue(iIVRPortNumber, szPassword, iQueue, szIVRName, iNumAgents);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentsCTIQueueAsync(string iIVRPortNumber, string szPassword, string iQueue, string szIVRName, string iNumAgents) {
            return base.Channel.LogonAgentsCTIQueueAsync(iIVRPortNumber, szPassword, iQueue, szIVRName, iNumAgents);
        }
        
        public string LogonAgentsCTI(string iIVRPortNumber, string szPassword, string szIVRName, string iNumAgents) {
            return base.Channel.LogonAgentsCTI(iIVRPortNumber, szPassword, szIVRName, iNumAgents);
        }
        
        public System.Threading.Tasks.Task<string> LogonAgentsCTIAsync(string iIVRPortNumber, string szPassword, string szIVRName, string iNumAgents) {
            return base.Channel.LogonAgentsCTIAsync(iIVRPortNumber, szPassword, szIVRName, iNumAgents);
        }
        
        public string LogoffAgentCTIQueue(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string szPassword) {
            return base.Channel.LogoffAgentCTIQueue(iIVRPortNumber, iQueue, szIVRName, bDisconnect, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentCTIQueueAsync(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string szPassword) {
            return base.Channel.LogoffAgentCTIQueueAsync(iIVRPortNumber, iQueue, szIVRName, bDisconnect, szPassword);
        }
        
        public string LogoffAgentCTI(string iIVRPortNumber, string szIVRName, string bDisconnect, string szPassword) {
            return base.Channel.LogoffAgentCTI(iIVRPortNumber, szIVRName, bDisconnect, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentCTIAsync(string iIVRPortNumber, string szIVRName, string bDisconnect, string szPassword) {
            return base.Channel.LogoffAgentCTIAsync(iIVRPortNumber, szIVRName, bDisconnect, szPassword);
        }
        
        public string LogoffAgents(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect, string iNumAgents) {
            return base.Channel.LogoffAgents(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, bDisconnect, iNumAgents);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentsAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string iQueue, string szServerName, string bDisconnect, string iNumAgents) {
            return base.Channel.LogoffAgentsAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, iQueue, szServerName, bDisconnect, iNumAgents);
        }
        
        public string LogoffAgentsCTIQueue(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string iNumAgents, string szPassword) {
            return base.Channel.LogoffAgentsCTIQueue(iIVRPortNumber, iQueue, szIVRName, bDisconnect, iNumAgents, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentsCTIQueueAsync(string iIVRPortNumber, string iQueue, string szIVRName, string bDisconnect, string iNumAgents, string szPassword) {
            return base.Channel.LogoffAgentsCTIQueueAsync(iIVRPortNumber, iQueue, szIVRName, bDisconnect, iNumAgents, szPassword);
        }
        
        public string LogoffAgentsCTI(string iIVRPortNumber, string szIVRName, string bDisconnect, string iNumAgents, string szPassword) {
            return base.Channel.LogoffAgentsCTI(iIVRPortNumber, szIVRName, bDisconnect, iNumAgents, szPassword);
        }
        
        public System.Threading.Tasks.Task<string> LogoffAgentsCTIAsync(string iIVRPortNumber, string szIVRName, string bDisconnect, string iNumAgents, string szPassword) {
            return base.Channel.LogoffAgentsCTIAsync(iIVRPortNumber, szIVRName, bDisconnect, iNumAgents, szPassword);
        }
        
        public string SwapPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.SwapPAQCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SwapPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.SwapPAQCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public string ConsultPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ConsultPAQCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ConsultPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ConsultPAQCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public string RedirectPAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string dwPosition, string szServerName) {
            return base.Channel.RedirectPAQCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, dwPosition, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> RedirectPAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string dwPosition, string szServerName) {
            return base.Channel.RedirectPAQCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, dwPosition, szServerName);
        }
        
        public string ReleasePAQCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ReleasePAQCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> ReleasePAQCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string dwPosition, string szServerName) {
            return base.Channel.ReleasePAQCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, dwPosition, szServerName);
        }
        
        public string SetIceServerName(string iSessionID, string szServerName) {
            return base.Channel.SetIceServerName(iSessionID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SetIceServerNameAsync(string iSessionID, string szServerName) {
            return base.Channel.SetIceServerNameAsync(iSessionID, szServerName);
        }
        
        public string SetIVRName(string iSessionID, string szServerName) {
            return base.Channel.SetIVRName(iSessionID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SetIVRNameAsync(string iSessionID, string szServerName) {
            return base.Channel.SetIVRNameAsync(iSessionID, szServerName);
        }
        
        public string GetNumPermittedAddresses() {
            return base.Channel.GetNumPermittedAddresses();
        }
        
        public System.Threading.Tasks.Task<string> GetNumPermittedAddressesAsync() {
            return base.Channel.GetNumPermittedAddressesAsync();
        }
        
        public string GetPermittedAddress(string iIndex) {
            return base.Channel.GetPermittedAddress(iIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetPermittedAddressAsync(string iIndex) {
            return base.Channel.GetPermittedAddressAsync(iIndex);
        }
        
        public string GetIceAgentState(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetIceAgentState(dwSwitchID, dwAgentID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetIceAgentStateAsync(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetIceAgentStateAsync(dwSwitchID, dwAgentID, szServerName);
        }
        
        public string GetIceAgentPendingState(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetIceAgentPendingState(dwSwitchID, dwAgentID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetIceAgentPendingStateAsync(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetIceAgentPendingStateAsync(dwSwitchID, dwAgentID, szServerName);
        }
        
        public string RecordCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.RecordCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> RecordCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.RecordCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string GetCallForwardData(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetCallForwardData(dwSwitchID, dwAgentID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetCallForwardDataAsync(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetCallForwardDataAsync(dwSwitchID, dwAgentID, szServerName);
        }
        
        public string SetCallForwardData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string flags, string szDN, string szServerName, string dwDuration) {
            return base.Channel.SetCallForwardData(dwSwitchID, dwAgentID, szPassword, dwAddressID, flags, szDN, szServerName, dwDuration);
        }
        
        public System.Threading.Tasks.Task<string> SetCallForwardDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string flags, string szDN, string szServerName, string dwDuration) {
            return base.Channel.SetCallForwardDataAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, flags, szDN, szServerName, dwDuration);
        }
        
        public string RedirectAlertingCall(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.RedirectAlertingCall(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> RedirectAlertingCallAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szDN, string szServerName) {
            return base.Channel.RedirectAlertingCallAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szDN, szServerName);
        }
        
        public string TelephoneEvent(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szData, string szServerName) {
            return base.Channel.TelephoneEvent(dwSwitchID, dwAgentID, szPassword, dwAddressID, szData, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> TelephoneEventAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szData, string szServerName) {
            return base.Channel.TelephoneEventAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szData, szServerName);
        }
        
        public string GetPAQStatusString(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetPAQStatusString(dwSwitchID, dwAgentID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetPAQStatusStringAsync(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetPAQStatusStringAsync(dwSwitchID, dwAgentID, szServerName);
        }
        
        public string GetCallInfoString(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetCallInfoString(dwSwitchID, dwAgentID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetCallInfoStringAsync(string dwSwitchID, string dwAgentID, string szServerName) {
            return base.Channel.GetCallInfoStringAsync(dwSwitchID, dwAgentID, szServerName);
        }
        
        public string GetIceAgentUserData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.GetIceAgentUserData(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetIceAgentUserDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string szServerName) {
            return base.Channel.GetIceAgentUserDataAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, szServerName);
        }
        
        public string SetIceAgentUserData(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string userData, string szServerName) {
            return base.Channel.SetIceAgentUserData(dwSwitchID, dwAgentID, szPassword, dwAddressID, userData, szServerName);
        }
        
        public System.Threading.Tasks.Task<string> SetIceAgentUserDataAsync(string dwSwitchID, string dwAgentID, string szPassword, string dwAddressID, string userData, string szServerName) {
            return base.Channel.SetIceAgentUserDataAsync(dwSwitchID, dwAgentID, szPassword, dwAddressID, userData, szServerName);
        }
    }
}
